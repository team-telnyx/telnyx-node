// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../core/resource';
import * as BrandAPI from './brand';
import { Brand, BrandQualifyByUsecaseParams, BrandQualifyByUsecaseResponse } from './brand';
import * as CampaignAPI from '../campaign/campaign';
import { APIPromise } from '../../core/api-promise';
import { RequestOptions } from '../../internal/request-options';

export class CampaignBuilder extends APIResource {
  brand: BrandAPI.Brand = new BrandAPI.Brand(this._client);

  /**
   * Before creating a campaign, use the
   * [Qualify By Usecase endpoint](https://developers.telnyx.com/api/messaging/10dlc/get-usecase-qualification)
   * to ensure that the brand you want to assign a new campaign to is qualified for
   * the desired use case of that campaign. **Please note:** After campaign creation,
   * you'll only be able to edit the campaign's sample messages. Creating a campaign
   * will entail an upfront, non-refundable three month's cost that will depend on
   * the campaign's use case
   * ([see 10DLC Costs section for details](https://developers.telnyx.com/docs/messaging/10dlc/concepts#10dlc-costs)).
   *
   * @example
   * ```ts
   * const campaignBuilder = await client.campaignBuilder.create(
   *   {
   *     brandId: 'brandId',
   *     description: 'description',
   *     usecase: 'usecase',
   *   },
   * );
   * ```
   */
  create(
    body: CampaignBuilderCreateParams,
    options?: RequestOptions,
  ): APIPromise<CampaignBuilderCreateResponse> {
    return this._client.post('/campaignBuilder', { body, ...options });
  }
}

/**
 * Campaign is generated by the 10DLC registry once the corresponding campaign
 * request is approved. Each campaign is assigned a unique identifier -
 * **campaignId**. Once a campaign is activated, limited information is published
 * to the NetNumber OSR service for consumption by members of the ecosystem. When a
 * campaign is suspended(reversible) or expired(non-reversible), campaign data is
 * deleted from the OSR service. Most attributes of campaignare immutable,
 * including **usecase**, **vertical**, **brandId** and **cspId**.
 */
export type CampaignBuilderCreateResponse = unknown | CampaignAPI.TelnyxCampaignCsp;

export interface CampaignBuilderCreateParams {
  /**
   * Alphanumeric identifier of the brand associated with this campaign.
   */
  brandId: string;

  /**
   * Summary description of this campaign.
   */
  description: string;

  /**
   * Campaign usecase. Must be of defined valid types. Use `/registry/enum/usecase`
   * operation to retrieve usecases available for given brand.
   */
  usecase: string;

  /**
   * Age gated message content in campaign.
   */
  ageGated?: boolean;

  /**
   * Campaign subscription auto-renewal option. If set to true, then campaign will
   * automatically renewal at end of billing cycle.
   */
  autoRenewal?: boolean;

  /**
   * Direct lending or loan arrangement
   */
  directLending?: boolean;

  /**
   * Does message generated by the campaign include URL link in SMS?
   */
  embeddedLink?: boolean;

  /**
   * Sample of an embedded link that will be sent to subscribers.
   */
  embeddedLinkSample?: string;

  /**
   * Does message generated by the campaign include phone number in SMS?
   */
  embeddedPhone?: boolean;

  /**
   * Subscriber help keywords. Multiple keywords are comma separated without space.
   */
  helpKeywords?: string;

  /**
   * Help message of the campaign.
   */
  helpMessage?: string;

  /**
   * Message flow description.
   */
  messageFlow?: string;

  /**
   * Submit campaign to given list of MNOs by MNO's network ID. Default is all MNOs
   * if no value provided.
   */
  mnoIds?: Array<number>;

  /**
   * Does campaign utilize pool of phone numbers?
   */
  numberPool?: boolean;

  /**
   * Subscriber opt-in keywords. Multiple keywords are comma separated without space.
   */
  optinKeywords?: string;

  /**
   * Subscriber opt-in message.
   */
  optinMessage?: string;

  /**
   * Subscriber opt-out keywords. Multiple keywords are comma separated without
   * space.
   */
  optoutKeywords?: string;

  /**
   * Subscriber opt-out message.
   */
  optoutMessage?: string;

  /**
   * Link to the campaign's privacy policy.
   */
  privacyPolicyLink?: string;

  /**
   * Caller supplied campaign reference ID. If supplied, the value must be unique
   * across all submitted campaigns. Can be used to prevent duplicate campaign
   * registrations.
   */
  referenceId?: string;

  /**
   * Alphanumeric identifier of the reseller that you want to associate with this
   * campaign.
   */
  resellerId?: string;

  /**
   * Message sample. Some campaign tiers require 1 or more message samples.
   */
  sample1?: string;

  /**
   * Message sample. Some campaign tiers require 2 or more message samples.
   */
  sample2?: string;

  /**
   * Message sample. Some campaign tiers require 3 or more message samples.
   */
  sample3?: string;

  /**
   * Message sample. Some campaign tiers require 4 or more message samples.
   */
  sample4?: string;

  /**
   * Message sample. Some campaign tiers require 5 or more message samples.
   */
  sample5?: string;

  /**
   * Does campaign responds to help keyword(s)?
   */
  subscriberHelp?: boolean;

  /**
   * Does campaign require subscriber to opt-in before SMS is sent to subscriber?
   */
  subscriberOptin?: boolean;

  /**
   * Does campaign support subscriber opt-out keyword(s)?
   */
  subscriberOptout?: boolean;

  /**
   * Campaign sub-usecases. Must be of defined valid sub-usecase types. Use
   * `/registry/enum/usecase` operation to retrieve list of valid sub-usecases
   */
  subUsecases?: Array<string>;

  /**
   * Tags to be set on the Campaign.
   */
  tag?: Array<string>;

  /**
   * Is terms and conditions accepted?
   */
  termsAndConditions?: boolean;

  /**
   * Link to the campaign's terms and conditions.
   */
  termsAndConditionsLink?: string;

  /**
   * Failover webhook to which campaign status updates are sent.
   */
  webhookFailoverURL?: string;

  /**
   * Webhook to which campaign status updates are sent.
   */
  webhookURL?: string;
}

CampaignBuilder.Brand = Brand;

export declare namespace CampaignBuilder {
  export {
    type CampaignBuilderCreateResponse as CampaignBuilderCreateResponse,
    type CampaignBuilderCreateParams as CampaignBuilderCreateParams,
  };

  export {
    Brand as Brand,
    type BrandQualifyByUsecaseResponse as BrandQualifyByUsecaseResponse,
    type BrandQualifyByUsecaseParams as BrandQualifyByUsecaseParams,
  };
}
