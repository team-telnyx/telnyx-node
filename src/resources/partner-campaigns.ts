// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../core/resource';
import * as CampaignAPI from './campaign/campaign';
import { APIPromise } from '../core/api-promise';
import { RequestOptions } from '../internal/request-options';
import { path } from '../internal/utils/path';

export class PartnerCampaigns extends APIResource {
  /**
   * Retrieve campaign details by `campaignId`.
   *
   * @example
   * ```ts
   * const telnyxDownstreamCampaign =
   *   await client.partnerCampaigns.retrieve('campaignId');
   * ```
   */
  retrieve(campaignID: string, options?: RequestOptions): APIPromise<TelnyxDownstreamCampaign> {
    return this._client.get(path`/partner_campaigns/${campaignID}`, options);
  }

  /**
   * Update campaign details by `campaignId`. **Please note:** Only webhook urls are
   * editable.
   *
   * @example
   * ```ts
   * const telnyxDownstreamCampaign =
   *   await client.partnerCampaigns.update('campaignId');
   * ```
   */
  update(
    campaignID: string,
    body: PartnerCampaignUpdateParams,
    options?: RequestOptions,
  ): APIPromise<TelnyxDownstreamCampaign> {
    return this._client.patch(path`/partner_campaigns/${campaignID}`, { body, ...options });
  }

  /**
   * Retrieve all partner campaigns you have shared to Telnyx in a paginated fashion.
   *
   * This endpoint is currently limited to only returning shared campaigns that
   * Telnyx has accepted. In other words, shared but pending campaigns are currently
   * omitted from the response from this endpoint.
   *
   * @example
   * ```ts
   * const partnerCampaigns =
   *   await client.partnerCampaigns.list();
   * ```
   */
  list(
    query: PartnerCampaignListParams | null | undefined = {},
    options?: RequestOptions,
  ): APIPromise<PartnerCampaignListResponse> {
    return this._client.get('/partner_campaigns', { query, ...options });
  }

  /**
   * Get all partner campaigns you have shared to Telnyx in a paginated fashion
   *
   * This endpoint is currently limited to only returning shared campaigns that
   * Telnyx has accepted. In other words, shared but pending campaigns are currently
   * omitted from the response from this endpoint.
   *
   * @example
   * ```ts
   * const response =
   *   await client.partnerCampaigns.listSharedByMe();
   * ```
   */
  listSharedByMe(
    query: PartnerCampaignListSharedByMeParams | null | undefined = {},
    options?: RequestOptions,
  ): APIPromise<PartnerCampaignListSharedByMeResponse> {
    return this._client.get('/partnerCampaign/sharedByMe', { query, ...options });
  }

  /**
   * Get Sharing Status
   *
   * @example
   * ```ts
   * const response =
   *   await client.partnerCampaigns.retrieveSharingStatus(
   *     'campaignId',
   *   );
   * ```
   */
  retrieveSharingStatus(
    campaignID: string,
    options?: RequestOptions,
  ): APIPromise<PartnerCampaignRetrieveSharingStatusResponse> {
    return this._client.get(path`/partnerCampaign/${campaignID}/sharing`, options);
  }
}

/**
 * Campaign is generated by the 10DLC registry once the corresponding campaign
 * request is approved. Each campaign is assigned a unique identifier -
 * **campaignId**. Once a campaign is activated, limited information is published
 * to the NetNumber OSR service for consumption by members of the ecosystem. When a
 * campaign is suspended(reversible) or expired(non-reversible), campaign data is
 * deleted from the OSR service.
 */
export interface TelnyxDownstreamCampaign {
  /**
   * Unique identifier assigned to the brand by the registry.
   */
  tcrBrandId: string;

  /**
   * Unique identifier assigned to the campaign by the registry.
   */
  tcrCampaignId: string;

  /**
   * Age gated content in campaign.
   */
  ageGated?: boolean;

  /**
   * Number of phone numbers associated with the campaign
   */
  assignedPhoneNumbersCount?: number;

  /**
   * Display or marketing name of the brand.
   */
  brandDisplayName?: string;

  /**
   * Campaign status
   */
  campaignStatus?:
    | 'TCR_PENDING'
    | 'TCR_SUSPENDED'
    | 'TCR_EXPIRED'
    | 'TCR_ACCEPTED'
    | 'TCR_FAILED'
    | 'TELNYX_ACCEPTED'
    | 'TELNYX_FAILED'
    | 'MNO_PENDING'
    | 'MNO_ACCEPTED'
    | 'MNO_REJECTED'
    | 'MNO_PROVISIONED'
    | 'MNO_PROVISIONING_FAILED';

  /**
   * Date and time that the brand was created at.
   */
  createdAt?: string;

  /**
   * Summary description of this campaign.
   */
  description?: string;

  /**
   * Direct lending or loan arrangement.
   */
  directLending?: boolean;

  /**
   * Does message generated by the campaign include URL link in SMS?
   */
  embeddedLink?: boolean;

  /**
   * Sample of an embedded link that will be sent to subscribers.
   */
  embeddedLinkSample?: string;

  /**
   * Does message generated by the campaign include phone number in SMS?
   */
  embeddedPhone?: boolean;

  /**
   * Failure reasons if campaign submission failed
   */
  failureReasons?: string;

  /**
   * Subscriber help keywords. Multiple keywords are comma separated without space.
   */
  helpKeywords?: string;

  /**
   * Help message of the campaign.
   */
  helpMessage?: string;

  /**
   * Indicates whether the campaign has a T-Mobile number pool ID associated with it.
   */
  isNumberPoolingEnabled?: boolean;

  /**
   * Message flow description.
   */
  messageFlow?: string;

  /**
   * Does campaign utilize pool of phone numbers?
   */
  numberPool?: boolean;

  /**
   * Subscriber opt-in keywords. Multiple keywords are comma separated without space.
   */
  optinKeywords?: string;

  /**
   * Subscriber opt-in message.
   */
  optinMessage?: string;

  /**
   * Subscriber opt-out keywords. Multiple keywords are comma separated without
   * space.
   */
  optoutKeywords?: string;

  /**
   * Subscriber opt-out message.
   */
  optoutMessage?: string;

  /**
   * Link to the campaign's privacy policy.
   */
  privacyPolicyLink?: string;

  /**
   * Message sample. Some campaign tiers require 1 or more message samples.
   */
  sample1?: string;

  /**
   * Message sample. Some campaign tiers require 2 or more message samples.
   */
  sample2?: string;

  /**
   * Message sample. Some campaign tiers require 3 or more message samples.
   */
  sample3?: string;

  /**
   * Message sample. Some campaign tiers require 4 or more message samples.
   */
  sample4?: string;

  /**
   * Message sample. Some campaign tiers require 5 or more message samples.
   */
  sample5?: string;

  /**
   * Does campaign require subscriber to opt-in before SMS is sent to subscriber?
   */
  subscriberOptin?: boolean;

  /**
   * Does campaign support subscriber opt-out keyword(s)?
   */
  subscriberOptout?: boolean;

  /**
   * Campaign sub-usecases. Must be of defined valid sub-usecase types. Use
   * `/registry/enum/usecase` operation to retrieve list of valid sub-usecases
   */
  subUsecases?: Array<string>;

  /**
   * Is terms & conditions accepted?
   */
  termsAndConditions?: boolean;

  /**
   * Link to the campaign's terms and conditions.
   */
  termsAndConditionsLink?: string;

  /**
   * Date and time that the brand was last updated at.
   */
  updatedAt?: string;

  /**
   * Campaign usecase. Must be of defined valid types. Use `/registry/enum/usecase`
   * operation to retrieve usecases available for given brand.
   */
  usecase?: string;

  /**
   * Failover webhook to which campaign status updates are sent.
   */
  webhookFailoverURL?: string;

  /**
   * Webhook to which campaign status updates are sent.
   */
  webhookURL?: string;
}

export interface PartnerCampaignListResponse {
  page?: number;

  records?: Array<TelnyxDownstreamCampaign>;

  totalRecords?: number;
}

export interface PartnerCampaignListSharedByMeResponse {
  page?: number;

  records?: Array<PartnerCampaignListSharedByMeResponse.Record>;

  totalRecords?: number;
}

export namespace PartnerCampaignListSharedByMeResponse {
  /**
   * Campaign is generated by the 10DLC registry once the corresponding campaign
   * request is approved. Each campaign is assigned a unique identifier -
   * **campaignId**. Once a campaign is activated, limited information is published
   * to the NetNumber OSR service for consumption by members of the ecosystem. When a
   * campaign is suspended(reversible) or expired(non-reversible), campaign data is
   * deleted from the OSR service. Most attributes of campaignare immutable,
   * including **usecase**, **vertical**, **brandId** and **cspId**.
   */
  export interface Record {
    /**
     * Alphanumeric identifier of the brand associated with this campaign.
     */
    brandId: string;

    /**
     * Alphanumeric identifier assigned by the registry for a campaign. This identifier
     * is required by the NetNumber OSR SMS enabling process of 10DLC.
     */
    campaignId: string;

    /**
     * Campaign usecase. Must be of defined valid types. Use `/registry/enum/usecase`
     * operation to retrieve usecases available for given brand.
     */
    usecase: string;

    /**
     * Unix timestamp when campaign was created.
     */
    createDate?: string;

    /**
     * Current campaign status. Possible values: ACTIVE, EXPIRED. A newly created
     * campaign defaults to ACTIVE status.
     */
    status?: string;
  }
}

export type PartnerCampaignRetrieveSharingStatusResponse = {
  [key: string]: CampaignAPI.CampaignSharingStatus;
};

export interface PartnerCampaignUpdateParams {
  /**
   * Webhook failover to which campaign status updates are sent.
   */
  webhookFailoverURL?: string;

  /**
   * Webhook to which campaign status updates are sent.
   */
  webhookURL?: string;
}

export interface PartnerCampaignListParams {
  /**
   * The 1-indexed page number to get. The default value is `1`.
   */
  page?: number;

  /**
   * The amount of records per page, limited to between 1 and 500 inclusive. The
   * default value is `10`.
   */
  recordsPerPage?: number;

  /**
   * Specifies the sort order for results. If not given, results are sorted by
   * createdAt in descending order.
   */
  sort?:
    | 'assignedPhoneNumbersCount'
    | '-assignedPhoneNumbersCount'
    | 'brandDisplayName'
    | '-brandDisplayName'
    | 'tcrBrandId'
    | '-tcrBranId'
    | 'tcrCampaignId'
    | '-tcrCampaignId'
    | 'createdAt'
    | '-createdAt'
    | 'campaignStatus'
    | '-campaignStatus';
}

export interface PartnerCampaignListSharedByMeParams {
  /**
   * The 1-indexed page number to get. The default value is `1`.
   */
  page?: number;

  /**
   * The amount of records per page, limited to between 1 and 500 inclusive. The
   * default value is `10`.
   */
  recordsPerPage?: number;
}

export declare namespace PartnerCampaigns {
  export {
    type TelnyxDownstreamCampaign as TelnyxDownstreamCampaign,
    type PartnerCampaignListResponse as PartnerCampaignListResponse,
    type PartnerCampaignListSharedByMeResponse as PartnerCampaignListSharedByMeResponse,
    type PartnerCampaignRetrieveSharingStatusResponse as PartnerCampaignRetrieveSharingStatusResponse,
    type PartnerCampaignUpdateParams as PartnerCampaignUpdateParams,
    type PartnerCampaignListParams as PartnerCampaignListParams,
    type PartnerCampaignListSharedByMeParams as PartnerCampaignListSharedByMeParams,
  };
}
