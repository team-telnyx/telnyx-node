// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'telnyx-mcp/filtering';
import { Metadata, asTextContentResult } from 'telnyx-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Telnyx from 'telnyx';

export const metadata: Metadata = {
  resource: 'partner_campaigns',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/partnerCampaign/sharedByMe',
  operationId: 'GetPartnerCampaignsSharedByUser',
};

export const tool: Tool = {
  name: 'list_shared_by_me_partner_campaigns',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nGet all partner campaigns you have shared to Telnyx in a paginated fashion\n\nThis endpoint is currently limited to only returning shared campaigns that Telnyx\nhas accepted. In other words, shared but pending campaigns are currently omitted\nfrom the response from this endpoint.\n\n# Response Schema\n```json\n{\n  $ref: '#/$defs/partner_campaign_list_shared_by_me_response',\n  $defs: {\n    partner_campaign_list_shared_by_me_response: {\n      type: 'object',\n      title: 'SharedCampaignRecordSet',\n      properties: {\n        page: {\n          type: 'integer',\n          title: 'Page'\n        },\n        records: {\n          type: 'array',\n          title: 'Records',\n          items: {\n            type: 'object',\n            title: 'SharedCampaign',\n            description: 'Campaign is generated by the 10DLC registry once the corresponding campaign request is approved. Each campaign is assigned a unique identifier - **campaignId**. Once a campaign is activated, limited information is published to the NetNumber OSR service for consumption by members of the ecosystem. When a campaign is suspended(reversible) or expired(non-reversible), campaign data is deleted from the OSR service. Most attributes of campaignare immutable, including **usecase**, **vertical**, **brandId** and **cspId**.',\n            properties: {\n              brandId: {\n                type: 'string',\n                title: 'Brandid',\n                description: 'Alphanumeric identifier of the brand associated with this campaign.'\n              },\n              campaignId: {\n                type: 'string',\n                title: 'Campaignid',\n                description: 'Alphanumeric identifier assigned by the registry for a campaign. This identifier is required by the NetNumber OSR SMS enabling process of 10DLC.'\n              },\n              usecase: {\n                type: 'string',\n                title: 'Usecase',\n                description: 'Campaign usecase. Must be of defined valid types. Use `/registry/enum/usecase` operation to retrieve usecases available for given brand.'\n              },\n              createDate: {\n                type: 'string',\n                title: 'Createdate',\n                description: 'Unix timestamp when campaign was created.'\n              },\n              status: {\n                type: 'string',\n                title: 'Status',\n                description: 'Current campaign status. Possible values: ACTIVE, EXPIRED. A newly created campaign defaults to ACTIVE status. '\n              }\n            },\n            required: [              'brandId',\n              'campaignId',\n              'usecase'\n            ]\n          }\n        },\n        totalRecords: {\n          type: 'integer',\n          title: 'Totalrecords'\n        }\n      }\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      page: {
        type: 'integer',
        title: 'Page',
        description: 'The 1-indexed page number to get. The default value is `1`.',
      },
      recordsPerPage: {
        type: 'integer',
        title: 'Recordsperpage',
        description:
          'The amount of records per page, limited to between 1 and 500 inclusive. The default value is `10`.',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: [],
  },
  annotations: {
    readOnlyHint: true,
  },
};

export const handler = async (client: Telnyx, args: Record<string, unknown> | undefined) => {
  const { jq_filter, ...body } = args as any;
  return asTextContentResult(
    await maybeFilter(jq_filter, await client.partnerCampaigns.listSharedByMe(body)),
  );
};

export default { metadata, tool, handler };
