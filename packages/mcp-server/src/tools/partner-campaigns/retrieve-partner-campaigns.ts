// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'telnyx-mcp/filtering';
import { Metadata, asTextContentResult } from 'telnyx-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Telnyx from 'telnyx';

export const metadata: Metadata = {
  resource: 'partner_campaigns',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/partner_campaigns/{campaignId}',
  operationId: 'GetSharedCampaign',
};

export const tool: Tool = {
  name: 'retrieve_partner_campaigns',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nRetrieve campaign details by `campaignId`.\n\n# Response Schema\n```json\n{\n  $ref: '#/$defs/telnyx_downstream_campaign',\n  $defs: {\n    telnyx_downstream_campaign: {\n      type: 'object',\n      title: 'TelnyxDownstreamCampaign',\n      description: 'Campaign is generated by the 10DLC registry once the corresponding campaign request is approved. Each campaign is assigned a unique identifier - **campaignId**. Once a campaign is activated, limited information is published to the NetNumber OSR service for consumption by members of the ecosystem. When a campaign is suspended(reversible) or expired(non-reversible), campaign data is deleted from the OSR service.',\n      properties: {\n        tcrBrandId: {\n          type: 'string',\n          title: 'TcrBrandid',\n          description: 'Unique identifier assigned to the brand by the registry.'\n        },\n        tcrCampaignId: {\n          type: 'string',\n          title: 'TcrCampaignid',\n          description: 'Unique identifier assigned to the campaign by the registry.'\n        },\n        ageGated: {\n          type: 'boolean',\n          title: 'AgeGated',\n          description: 'Age gated content in campaign.'\n        },\n        assignedPhoneNumbersCount: {\n          type: 'number',\n          title: 'AssignedPhoneNumbersCount',\n          description: 'Number of phone numbers associated with the campaign'\n        },\n        brandDisplayName: {\n          type: 'string',\n          title: 'Branddisplayname',\n          description: 'Display or marketing name of the brand.'\n        },\n        campaignStatus: {\n          type: 'string',\n          title: 'campaignStatus',\n          description: 'Campaign status',\n          enum: [            'TCR_PENDING',\n            'TCR_SUSPENDED',\n            'TCR_EXPIRED',\n            'TCR_ACCEPTED',\n            'TCR_FAILED',\n            'TELNYX_ACCEPTED',\n            'TELNYX_FAILED',\n            'MNO_PENDING',\n            'MNO_ACCEPTED',\n            'MNO_REJECTED',\n            'MNO_PROVISIONED',\n            'MNO_PROVISIONING_FAILED'\n          ]\n        },\n        createdAt: {\n          type: 'string',\n          description: 'Date and time that the brand was created at.'\n        },\n        description: {\n          type: 'string',\n          title: 'Description',\n          description: 'Summary description of this campaign.'\n        },\n        directLending: {\n          type: 'boolean',\n          title: 'Directlending',\n          description: 'Direct lending or loan arrangement.'\n        },\n        embeddedLink: {\n          type: 'boolean',\n          title: 'Embeddedlink',\n          description: 'Does message generated by the campaign include URL link in SMS?'\n        },\n        embeddedLinkSample: {\n          type: 'string',\n          title: 'EmbeddedLinkSample',\n          description: 'Sample of an embedded link that will be sent to subscribers.'\n        },\n        embeddedPhone: {\n          type: 'boolean',\n          title: 'Embeddedphone',\n          description: 'Does message generated by the campaign include phone number in SMS?'\n        },\n        failureReasons: {\n          type: 'string',\n          title: 'failureReasons',\n          description: 'Failure reasons if campaign submission failed'\n        },\n        helpKeywords: {\n          type: 'string',\n          title: 'Helpkeywords',\n          description: 'Subscriber help keywords. Multiple keywords are comma separated without space.'\n        },\n        helpMessage: {\n          type: 'string',\n          title: 'Helpmessage',\n          description: 'Help message of the campaign.'\n        },\n        isNumberPoolingEnabled: {\n          type: 'boolean',\n          title: 'isNumberPoolingEnabled',\n          description: 'Indicates whether the campaign has a T-Mobile number pool ID associated with it.'\n        },\n        messageFlow: {\n          type: 'string',\n          title: 'Messageflow',\n          description: 'Message flow description.'\n        },\n        numberPool: {\n          type: 'boolean',\n          title: 'Numberpool',\n          description: 'Does campaign utilize pool of phone numbers?'\n        },\n        optinKeywords: {\n          type: 'string',\n          title: 'Optinkeywords',\n          description: 'Subscriber opt-in keywords. Multiple keywords are comma separated without space.'\n        },\n        optinMessage: {\n          type: 'string',\n          title: 'Optinmessage',\n          description: 'Subscriber opt-in message.'\n        },\n        optoutKeywords: {\n          type: 'string',\n          title: 'Optoutkeywords',\n          description: 'Subscriber opt-out keywords. Multiple keywords are comma separated without space.'\n        },\n        optoutMessage: {\n          type: 'string',\n          title: 'Optoutmessage',\n          description: 'Subscriber opt-out message.'\n        },\n        privacyPolicyLink: {\n          type: 'string',\n          title: 'PrivacyPolicyLink',\n          description: 'Link to the campaign\\'s privacy policy.'\n        },\n        sample1: {\n          type: 'string',\n          title: 'Sample1',\n          description: 'Message sample. Some campaign tiers require 1 or more message samples.'\n        },\n        sample2: {\n          type: 'string',\n          title: 'Sample2',\n          description: 'Message sample. Some campaign tiers require 2 or more message samples.'\n        },\n        sample3: {\n          type: 'string',\n          title: 'Sample3',\n          description: 'Message sample. Some campaign tiers require 3 or more message samples.'\n        },\n        sample4: {\n          type: 'string',\n          title: 'Sample4',\n          description: 'Message sample. Some campaign tiers require 4 or more message samples.'\n        },\n        sample5: {\n          type: 'string',\n          title: 'Sample5',\n          description: 'Message sample. Some campaign tiers require 5 or more message samples.'\n        },\n        subscriberOptin: {\n          type: 'boolean',\n          title: 'Subscriberoptin',\n          description: 'Does campaign require subscriber to opt-in before SMS is sent to subscriber?'\n        },\n        subscriberOptout: {\n          type: 'boolean',\n          title: 'Subscriberoptout',\n          description: 'Does campaign support subscriber opt-out keyword(s)?'\n        },\n        subUsecases: {\n          type: 'array',\n          title: 'Subusecases',\n          description: 'Campaign sub-usecases. Must be of defined valid sub-usecase types. Use `/registry/enum/usecase` operation to retrieve list of valid sub-usecases',\n          items: {\n            type: 'string'\n          }\n        },\n        termsAndConditions: {\n          type: 'boolean',\n          title: 'Termsandconditions',\n          description: 'Is terms & conditions accepted?'\n        },\n        termsAndConditionsLink: {\n          type: 'string',\n          title: 'TermsAndConditionsLink',\n          description: 'Link to the campaign\\'s terms and conditions.'\n        },\n        updatedAt: {\n          type: 'string',\n          description: 'Date and time that the brand was last updated at.'\n        },\n        usecase: {\n          type: 'string',\n          title: 'Usecase',\n          description: 'Campaign usecase. Must be of defined valid types. Use `/registry/enum/usecase` operation to retrieve usecases available for given brand.'\n        },\n        webhookFailoverURL: {\n          type: 'string',\n          title: 'WebhookFailoverURL',\n          description: 'Failover webhook to which campaign status updates are sent.'\n        },\n        webhookURL: {\n          type: 'string',\n          title: 'WebhookURL',\n          description: 'Webhook to which campaign status updates are sent.'\n        }\n      },\n      required: [        'tcrBrandId',\n        'tcrCampaignId'\n      ]\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      campaignId: {
        type: 'string',
        title: 'Campaignid',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['campaignId'],
  },
  annotations: {
    readOnlyHint: true,
  },
};

export const handler = async (client: Telnyx, args: Record<string, unknown> | undefined) => {
  const { campaignId, jq_filter, ...body } = args as any;
  return asTextContentResult(
    await maybeFilter(jq_filter, await client.partnerCampaigns.retrieve(campaignId)),
  );
};

export default { metadata, tool, handler };
