// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'telnyx-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Telnyx from 'telnyx-node';

export const metadata: Metadata = {
  resource: 'campaign_builder',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/campaignBuilder',
  operationId: 'PostCampaign',
};

export const tool: Tool = {
  name: 'create_campaign_builder',
  description:
    "Before creating a campaign, use the [Qualify By Usecase endpoint](https://developers.telnyx.com/api/messaging/10dlc/get-usecase-qualification) to ensure that the brand you want to assign a new campaign to is qualified for the desired use case of that campaign. **Please note:** After campaign creation, you'll only be able to edit the campaign's sample messages. Creating a campaign will entail an upfront, non-refundable three month's cost that will depend on the campaign's use case ([see 10DLC Costs section for details](https://developers.telnyx.com/docs/messaging/10dlc/concepts#10dlc-costs)).",
  inputSchema: {
    type: 'object',
    properties: {
      brandId: {
        type: 'string',
        title: 'Brandid',
        description: 'Alphanumeric identifier of the brand associated with this campaign.',
      },
      description: {
        type: 'string',
        title: 'Description',
        description: 'Summary description of this campaign.',
      },
      usecase: {
        type: 'string',
        title: 'Usecase',
        description:
          'Campaign usecase. Must be of defined valid types. Use `/registry/enum/usecase` operation to retrieve usecases available for given brand.',
      },
      ageGated: {
        type: 'boolean',
        title: 'Agegated',
        description: 'Age gated message content in campaign.',
      },
      autoRenewal: {
        type: 'boolean',
        title: 'Autorenewal',
        description:
          'Campaign subscription auto-renewal option. If set to true, then campaign will automatically renewal at end of billing cycle.',
      },
      directLending: {
        type: 'boolean',
        title: 'Directlending',
        description: 'Direct lending or loan arrangement',
      },
      embeddedLink: {
        type: 'boolean',
        title: 'Embeddedlink',
        description: 'Does message generated by the campaign include URL link in SMS?',
      },
      embeddedLinkSample: {
        type: 'string',
        title: 'EmbeddedLinkSample',
        description: 'Sample of an embedded link that will be sent to subscribers.',
      },
      embeddedPhone: {
        type: 'boolean',
        title: 'Embeddedphone',
        description: 'Does message generated by the campaign include phone number in SMS?',
      },
      helpKeywords: {
        type: 'string',
        title: 'Helpkeywords',
        description: 'Subscriber help keywords. Multiple keywords are comma separated without space.',
      },
      helpMessage: {
        type: 'string',
        title: 'Helpmessage',
        description: 'Help message of the campaign.',
      },
      messageFlow: {
        type: 'string',
        title: 'Messageflow',
        description: 'Message flow description.',
      },
      mnoIds: {
        type: 'array',
        title: 'Mnoids',
        description:
          "Submit campaign to given list of MNOs by MNO's network ID. Default is all MNOs if no value provided.",
        items: {
          type: 'integer',
        },
      },
      numberPool: {
        type: 'boolean',
        title: 'Numberpool',
        description: 'Does campaign utilize pool of phone numbers?',
      },
      optinKeywords: {
        type: 'string',
        title: 'Optinkeywords',
        description: 'Subscriber opt-in keywords. Multiple keywords are comma separated without space.',
      },
      optinMessage: {
        type: 'string',
        title: 'Optinmessage',
        description: 'Subscriber opt-in message.',
      },
      optoutKeywords: {
        type: 'string',
        title: 'Optoutkeywords',
        description: 'Subscriber opt-out keywords. Multiple keywords are comma separated without space.',
      },
      optoutMessage: {
        type: 'string',
        title: 'Optoutmessage',
        description: 'Subscriber opt-out message.',
      },
      privacyPolicyLink: {
        type: 'string',
        title: 'PrivacyPolicyLink',
        description: "Link to the campaign's privacy policy.",
      },
      referenceId: {
        type: 'string',
        title: 'Referenceid',
        description:
          'Caller supplied campaign reference ID. If supplied, the value must be unique across all submitted campaigns. Can be used to prevent duplicate campaign registrations.',
      },
      resellerId: {
        type: 'string',
        title: 'Resellerid',
        description: 'Alphanumeric identifier of the reseller that you want to associate with this campaign.',
      },
      sample1: {
        type: 'string',
        title: 'Sample1',
        description: 'Message sample. Some campaign tiers require 1 or more message samples.',
      },
      sample2: {
        type: 'string',
        title: 'Sample2',
        description: 'Message sample. Some campaign tiers require 2 or more message samples.',
      },
      sample3: {
        type: 'string',
        title: 'Sample3',
        description: 'Message sample. Some campaign tiers require 3 or more message samples.',
      },
      sample4: {
        type: 'string',
        title: 'Sample4',
        description: 'Message sample. Some campaign tiers require 4 or more message samples.',
      },
      sample5: {
        type: 'string',
        title: 'Sample5',
        description: 'Message sample. Some campaign tiers require 5 or more message samples.',
      },
      subscriberHelp: {
        type: 'boolean',
        title: 'Subscriberhelp',
        description: 'Does campaign responds to help keyword(s)?',
      },
      subscriberOptin: {
        type: 'boolean',
        title: 'Subscriberoptin',
        description: 'Does campaign require subscriber to opt-in before SMS is sent to subscriber?',
      },
      subscriberOptout: {
        type: 'boolean',
        title: 'Subscriberoptout',
        description: 'Does campaign support subscriber opt-out keyword(s)?',
      },
      subUsecases: {
        type: 'array',
        title: 'Subusecases',
        description:
          'Campaign sub-usecases. Must be of defined valid sub-usecase types. Use `/registry/enum/usecase` operation to retrieve list of valid sub-usecases',
        items: {
          type: 'string',
        },
      },
      tag: {
        type: 'array',
        title: 'Tag',
        description: 'Tags to be set on the Campaign.',
        items: {
          type: 'string',
        },
      },
      termsAndConditions: {
        type: 'boolean',
        title: 'Termsandconditions',
        description: 'Is terms and conditions accepted?',
      },
      termsAndConditionsLink: {
        type: 'string',
        title: 'TermsAndConditionsLink',
        description: "Link to the campaign's terms and conditions.",
      },
      webhookFailoverURL: {
        type: 'string',
        title: 'WebhookFailoverURL',
        description: 'Failover webhook to which campaign status updates are sent.',
      },
      webhookURL: {
        type: 'string',
        title: 'WebhookURL',
        description: 'Webhook to which campaign status updates are sent.',
      },
    },
    required: ['brandId', 'description', 'usecase'],
  },
  annotations: {},
};

export const handler = async (client: Telnyx, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  return asTextContentResult(await client.campaignBuilder.create(body));
};

export default { metadata, tool, handler };
