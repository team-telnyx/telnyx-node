// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'telnyx-mcp/filtering';
import { Metadata, asTextContentResult } from 'telnyx-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Telnyx from 'telnyx';

export const metadata: Metadata = {
  resource: 'sim_cards',
  operation: 'write',
  tags: [],
  httpMethod: 'delete',
  httpPath: '/sim_cards/{id}',
  operationId: 'DeleteSimCard',
};

export const tool: Tool = {
  name: 'delete_sim_cards',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThe SIM card will be decommissioned, removed from your account and you will stop being charged.<br />The SIM card won't be able to connect to the network after the deletion is completed, thus making it impossible to consume data.<br/>\nTransitioning to the disabled state may take a period of time.\nUntil the transition is completed, the SIM card status will be disabling <code>disabling</code>.<br />In order to re-enable the SIM card, you will need to re-register it.\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    data: {\n      $ref: '#/$defs/sim_card'\n    }\n  },\n  $defs: {\n    sim_card: {\n      type: 'object',\n      title: 'SIMCard',\n      properties: {\n        id: {\n          type: 'string',\n          description: 'Identifies the resource.'\n        },\n        actions_in_progress: {\n          type: 'boolean',\n          description: 'Indicate whether the SIM card has any pending (in-progress) actions.'\n        },\n        authorized_imeis: {\n          type: 'array',\n          description: 'List of IMEIs authorized to use a given SIM card.',\n          items: {\n            type: 'string'\n          }\n        },\n        created_at: {\n          type: 'string',\n          description: 'ISO 8601 formatted date-time indicating when the resource was created.'\n        },\n        current_billing_period_consumed_data: {\n          type: 'object',\n          description: 'The SIM card consumption so far in the current billing cycle.',\n          properties: {\n            amount: {\n              type: 'string'\n            },\n            unit: {\n              type: 'string'\n            }\n          }\n        },\n        current_device_location: {\n          type: 'object',\n          description: 'Current physical location data of a given SIM card. Accuracy is given in meters.',\n          properties: {\n            accuracy: {\n              type: 'integer'\n            },\n            accuracy_unit: {\n              type: 'string'\n            },\n            latitude: {\n              type: 'string'\n            },\n            longitude: {\n              type: 'string'\n            }\n          }\n        },\n        current_imei: {\n          type: 'string',\n          description: 'IMEI of the device where a given SIM card is currently being used.'\n        },\n        current_mcc: {\n          type: 'string',\n          description: 'Mobile Country Code of the current network to which the SIM card is connected. It\\'s a three decimal digit that identifies a country.<br/><br/>\\nThis code is commonly seen joined with a Mobile Network Code (MNC) in a tuple that allows identifying a carrier known as PLMN (Public Land Mobile Network) code.'\n        },\n        current_mnc: {\n          type: 'string',\n          description: 'Mobile Network Code of the current network to which the SIM card is connected. It\\'s a two to three decimal digits that identify a network.<br/><br/>\\n This code is commonly seen joined with a Mobile Country Code (MCC) in a tuple that allows identifying a carrier known as PLMN (Public Land Mobile Network) code.'\n        },\n        data_limit: {\n          type: 'object',\n          description: 'The SIM card individual data limit configuration.',\n          properties: {\n            amount: {\n              type: 'string'\n            },\n            unit: {\n              type: 'string',\n              enum: [                'MB',\n                'GB'\n              ]\n            }\n          }\n        },\n        iccid: {\n          type: 'string',\n          description: 'The ICCID is the identifier of the specific SIM card/chip. Each SIM is internationally identified by its integrated circuit card identifier (ICCID). ICCIDs are stored in the SIM card\\'s memory and are also engraved or printed on the SIM card body during a process called personalization.\\n'\n        },\n        imsi: {\n          type: 'string',\n          description: 'SIM cards are identified on their individual network operators by a unique International Mobile Subscriber Identity (IMSI). <br/>\\nMobile network operators connect mobile phone calls and communicate with their market SIM cards using their IMSIs. The IMSI is stored in the Subscriber  Identity Module (SIM) inside the device and is sent by the device to the appropriate network. It is used to acquire the details of the device in the Home  Location Register (HLR) or the Visitor Location Register (VLR).\\n'\n        },\n        ipv4: {\n          type: 'string',\n          description: 'The SIM\\'s address in the currently connected network. This IPv4 address is usually obtained dynamically, so it may vary according to the location or new connections.\\n'\n        },\n        ipv6: {\n          type: 'string',\n          description: 'The SIM\\'s address in the currently connected network. This IPv6 address is usually obtained dynamically, so it may vary according to the location or new connections.\\n'\n        },\n        live_data_session: {\n          type: 'string',\n          description: 'Indicates whether the device is actively connected to a network and able to run data.',\n          enum: [            'connected',\n            'disconnected',\n            'unknown'\n          ]\n        },\n        msisdn: {\n          type: 'string',\n          description: 'Mobile Station International Subscriber Directory Number (MSISDN) is a number used to identify a mobile phone number internationally. <br/>\\nMSISDN is defined by the E.164 numbering plan. It includes a country code and a National Destination Code which identifies the subscriber\\'s operator.\\n'\n        },\n        pin_puk_codes: {\n          type: 'object',\n          description: 'PIN and PUK codes for the SIM card. Only available when include_pin_puk_codes=true is set in the request.',\n          properties: {\n            pin1: {\n              type: 'string',\n              description: 'The primary Personal Identification Number (PIN) for the SIM card. This is a 4-digit code used to protect the SIM card from unauthorized use.'\n            },\n            pin2: {\n              type: 'string',\n              description: 'The secondary Personal Identification Number (PIN2) for the SIM card. This is a 4-digit code used for additional security features.'\n            },\n            puk1: {\n              type: 'string',\n              description: 'The primary Personal Unblocking Key (PUK1) for the SIM card. This is an 8-digit code used to unlock the SIM card if PIN1 is entered incorrectly multiple times.'\n            },\n            puk2: {\n              type: 'string',\n              description: 'The secondary Personal Unblocking Key (PUK2) for the SIM card. This is an 8-digit code used to unlock the SIM card if PIN2 is entered incorrectly multiple times.'\n            }\n          }\n        },\n        record_type: {\n          type: 'string'\n        },\n        sim_card_group_id: {\n          type: 'string',\n          description: 'The group SIMCardGroup identification. This attribute can be <code>null</code> when it\\'s present in an associated resource.'\n        },\n        status: {\n          $ref: '#/$defs/sim_card_status'\n        },\n        tags: {\n          type: 'array',\n          description: 'Searchable tags associated with the SIM card',\n          items: {\n            type: 'string'\n          }\n        },\n        type: {\n          type: 'string',\n          description: 'The type of SIM card',\n          enum: [            'physical',\n            'esim'\n          ]\n        },\n        updated_at: {\n          type: 'string',\n          description: 'ISO 8601 formatted date-time indicating when the resource was updated.'\n        }\n      }\n    },\n    sim_card_status: {\n      type: 'object',\n      properties: {\n        reason: {\n          type: 'string',\n          description: 'It describes why the SIM card is in the current status.'\n        },\n        value: {\n          type: 'string',\n          description: 'The current status of the SIM card. It will be one of the following: <br/>\\n<ul>\\n <li><code>registering</code> - the card is being registered</li>\\n <li><code>enabling</code> - the card is being enabled</li>\\n <li><code>enabled</code> - the card is enabled and ready for use</li>\\n <li><code>disabling</code> - the card is being disabled</li>\\n <li><code>disabled</code> - the card has been disabled and cannot be used</li>\\n <li><code>data_limit_exceeded</code> - the card has exceeded its data consumption limit</li>\\n <li><code>setting_standby</code> - the process to set the card in stand by is in progress</li>\\n <li><code>standby</code> - the card is in stand by</li>\\n</ul>\\nTransitioning between the enabled and disabled states may take a period of time.',\n          enum: [            'registering',\n            'enabling',\n            'enabled',\n            'disabling',\n            'disabled',\n            'data_limit_exceeded',\n            'setting_standby',\n            'standby'\n          ]\n        }\n      }\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      id: {
        type: 'string',
      },
      report_lost: {
        type: 'boolean',
        description:
          "Enables deletion of disabled eSIMs that can't be uninstalled from a device. This is irreversible and the eSIM cannot be re-registered.",
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['id'],
  },
  annotations: {
    idempotentHint: true,
  },
};

export const handler = async (client: Telnyx, args: Record<string, unknown> | undefined) => {
  const { id, jq_filter, ...body } = args as any;
  return asTextContentResult(await maybeFilter(jq_filter, await client.simCards.delete(id, body)));
};

export default { metadata, tool, handler };
