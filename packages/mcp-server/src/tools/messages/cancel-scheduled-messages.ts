// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'telnyx-mcp/filtering';
import { Metadata, asTextContentResult } from 'telnyx-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Telnyx from 'telnyx';

export const metadata: Metadata = {
  resource: 'messages',
  operation: 'write',
  tags: [],
  httpMethod: 'delete',
  httpPath: '/messages/{id}',
  operationId: 'CancelMessage',
};

export const tool: Tool = {
  name: 'cancel_scheduled_messages',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nCancel a scheduled message that has not yet been sent. Only messages with `status=scheduled` and `send_at` more than a minute from now can be cancelled.\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    id: {\n      type: 'string',\n      description: 'Identifies the type of resource.'\n    },\n    completed_at: {\n      type: 'string',\n      description: 'ISO 8601 formatted date indicating when the message was finalized.',\n      format: 'date-time'\n    },\n    cost: {\n      type: 'object',\n      properties: {\n        amount: {\n          type: 'string',\n          description: 'The amount deducted from your account.'\n        },\n        currency: {\n          type: 'string',\n          description: 'The ISO 4217 currency identifier.'\n        }\n      }\n    },\n    cost_breakdown: {\n      type: 'object',\n      description: 'Detailed breakdown of the message cost components.',\n      properties: {\n        carrier_fee: {\n          type: 'object',\n          properties: {\n            amount: {\n              type: 'string',\n              description: 'The carrier fee amount.'\n            },\n            currency: {\n              type: 'string',\n              description: 'The ISO 4217 currency identifier.'\n            }\n          }\n        },\n        rate: {\n          type: 'object',\n          properties: {\n            amount: {\n              type: 'string',\n              description: 'The rate amount applied.'\n            },\n            currency: {\n              type: 'string',\n              description: 'The ISO 4217 currency identifier.'\n            }\n          }\n        }\n      }\n    },\n    direction: {\n      type: 'string',\n      description: 'The direction of the message. Inbound messages are sent to you whereas outbound messages are sent from you.',\n      enum: [        'outbound'\n      ]\n    },\n    encoding: {\n      type: 'string',\n      description: 'Encoding scheme used for the message body.'\n    },\n    errors: {\n      type: 'array',\n      description: 'These errors may point at addressees when referring to unsuccessful/unconfirmed delivery statuses.',\n      items: {\n        $ref: '#/$defs/messaging_error'\n      }\n    },\n    from: {\n      type: 'object',\n      properties: {\n        carrier: {\n          type: 'string',\n          description: 'The carrier of the receiver.'\n        },\n        line_type: {\n          type: 'string',\n          description: 'The line-type of the receiver.',\n          enum: [            'Wireline',\n            'Wireless',\n            'VoWiFi',\n            'VoIP',\n            'Pre-Paid Wireless',\n            ''\n          ]\n        },\n        phone_number: {\n          type: 'string',\n          description: 'Sending address (+E.164 formatted phone number, alphanumeric sender ID, or short code).'\n        }\n      }\n    },\n    media: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          content_type: {\n            type: 'string',\n            description: 'The MIME type of the requested media.'\n          },\n          sha256: {\n            type: 'string',\n            description: 'The SHA256 hash of the requested media.'\n          },\n          size: {\n            type: 'integer',\n            description: 'The size of the requested media.'\n          },\n          url: {\n            type: 'string',\n            description: 'The url of the media requested to be sent.'\n          }\n        }\n      }\n    },\n    messaging_profile_id: {\n      type: 'string',\n      description: 'Unique identifier for a messaging profile.'\n    },\n    organization_id: {\n      type: 'string',\n      description: 'The id of the organization the messaging profile belongs to.'\n    },\n    parts: {\n      type: 'integer',\n      description: 'Number of parts into which the message\\'s body must be split.'\n    },\n    received_at: {\n      type: 'string',\n      description: 'ISO 8601 formatted date indicating when the message request was received.',\n      format: 'date-time'\n    },\n    record_type: {\n      type: 'string',\n      description: 'Identifies the type of the resource.',\n      enum: [        'message'\n      ]\n    },\n    sent_at: {\n      type: 'string',\n      description: 'ISO 8601 formatted date indicating when the message was sent.',\n      format: 'date-time'\n    },\n    subject: {\n      type: 'string',\n      description: 'Subject of multimedia message'\n    },\n    tags: {\n      type: 'array',\n      description: 'Tags associated with the resource.',\n      items: {\n        type: 'string'\n      }\n    },\n    tcr_campaign_billable: {\n      type: 'boolean',\n      description: 'Indicates whether the TCR campaign is billable.'\n    },\n    tcr_campaign_id: {\n      type: 'string',\n      description: 'The Campaign Registry (TCR) campaign ID associated with the message.'\n    },\n    tcr_campaign_registered: {\n      type: 'string',\n      description: 'The registration status of the TCR campaign.'\n    },\n    text: {\n      type: 'string',\n      description: 'Message body (i.e., content) as a non-empty string.\\n\\n**Required for SMS**'\n    },\n    to: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          carrier: {\n            type: 'string',\n            description: 'The carrier of the receiver.'\n          },\n          line_type: {\n            type: 'string',\n            description: 'The line-type of the receiver.',\n            enum: [              'Wireline',\n              'Wireless',\n              'VoWiFi',\n              'VoIP',\n              'Pre-Paid Wireless',\n              ''\n            ]\n          },\n          phone_number: {\n            type: 'string',\n            description: 'Receiving address (+E.164 formatted phone number or short code).'\n          },\n          status: {\n            type: 'string',\n            description: 'The delivery status of the message.',\n            enum: [              'scheduled',\n              'queued',\n              'sending',\n              'sent',\n              'cancelled',\n              'expired',\n              'sending_failed',\n              'delivery_unconfirmed',\n              'delivered',\n              'delivery_failed'\n            ]\n          }\n        }\n      }\n    },\n    type: {\n      type: 'string',\n      description: 'The type of message.',\n      enum: [        'SMS',\n        'MMS'\n      ]\n    },\n    valid_until: {\n      type: 'string',\n      description: 'Message must be out of the queue by this time or else it will be discarded and marked as \\'sending_failed\\'. Once the message moves out of the queue, this field will be nulled',\n      format: 'date-time'\n    },\n    webhook_failover_url: {\n      type: 'string',\n      description: 'The failover URL where webhooks related to this message will be sent if sending to the primary URL fails.'\n    },\n    webhook_url: {\n      type: 'string',\n      description: 'The URL where webhooks related to this message will be sent.'\n    }\n  },\n  $defs: {\n    messaging_error: {\n      type: 'object',\n      properties: {\n        code: {\n          type: 'string'\n        },\n        title: {\n          type: 'string'\n        },\n        detail: {\n          type: 'string'\n        },\n        meta: {\n          type: 'object',\n          additionalProperties: true\n        },\n        source: {\n          type: 'object',\n          properties: {\n            parameter: {\n              type: 'string',\n              description: 'Indicates which query parameter caused the error.'\n            },\n            pointer: {\n              type: 'string',\n              description: 'JSON pointer (RFC6901) to the offending entity.'\n            }\n          }\n        }\n      },\n      required: [        'code',\n        'title'\n      ]\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      id: {
        type: 'string',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['id'],
  },
  annotations: {
    idempotentHint: true,
  },
};

export const handler = async (client: Telnyx, args: Record<string, unknown> | undefined) => {
  const { id, jq_filter, ...body } = args as any;
  return asTextContentResult(await maybeFilter(jq_filter, await client.messages.cancelScheduled(id)));
};

export default { metadata, tool, handler };
